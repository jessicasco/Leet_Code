# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverFromPreorder(self, S):
        """
        :type S: str
        :rtype: TreeNode
        """
        def helper(s, i):
            if s == '':
                return None
            if '-' not in s:
                return TreeNode(s)
            count = 0
            left, right = None, None
            for j in range(len(s)):
                if s[j] == '-':
                    count += 1
                else:
                    if count == i:
                        if left == None:
                            left = j - count
                        else:
                            right = j - count
                    count = 0
            node = TreeNode(s[:left])
            if right == None:
                node.left = helper(s[left+i:], i+1)
            else:
                node.left = helper(s[left+i:right], i+1)
                node.right = helper(s[right+i:], i+1)
            return node
        return helper(S, 1)
